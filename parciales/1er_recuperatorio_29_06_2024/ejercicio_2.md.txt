# Ejercicio 2 - Refactoring

Ejercicio: 
```java
public class Pago {
	private List<Producto> productos;
	private String tipo;
	private static final double ADICIONAL_TARJETA = 1000.0;
	private static final double DESCUENTO_EFECTIVO = 2000.0;
	
	public Pago(String tipo, List<Producto> productos){
		this.productos = productos;
		this.tipo = tipo;
	}

	public double calcularMontoFinal(){
		double total = 0.0;
		if(this.tipo == "EFECTIVO"){
			for(Producto producto: this.productos){
				total = total + producto.getPrecio() + (producto.getPrecio*producto.getIVA())
			}
			if(total > 100000){
				total = total - DESCUENTO_EFECTIVO
			}
		}else if (this.tipo == "TARJETA"){
			for(Producto producto: this.productos){
				total = total + producto.getPrecio() + (producto.getPrecio*producto.getIVA())
			}
			total = total + ADICIONAL_TARJETA;
		}
		return total;
	}
}

public class Producto {
	private double precio;
	private double IVA;

	public Producto(double Precio, double IVA){
		this.precio = precio;
		this.IVA = IVA
	}

	public double getPrecio(){
		return this.precio;
	}

	public double getIVA(){
		return this.IVA;
	}
}
```

## Resolución
1. **Sentencia Switch**: como se puede ver, dependiendo el tipo de pago, se ejecuta una lógica correspondiente. En caso que esto escale, no es conveniente, por lo que para resolver este Bad Smell se hace lo siguiente:
	* Crear una interfaz `TipoPago`, reemplazando el tipo correspondiente en la clase `Pago` de String a TipoPago (también en sus asignaciones).
	* Eliminar las variables *adicional_tarjeta* y *descuento_efectivo*
	*  Reemplazar el condicional ejecutando el método `calcularMonto` de la interfaz `TipoPago`